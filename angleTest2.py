from math import hypot, pi
cosins = [-1.0, -0.9996988186962042, -0.9987954562051724, -0.9972904566786902, -0.9951847266721968, -0.99247953459871, -0.989176509964781, -0.9852776423889412, -0.9807852804032304, -0.9757021300385285, -0.970031253194544, -0.9637760657954398, -0.9569403357322088, -0.9495281805930367, -0.9415440651830207, -0.9329927988347388, -0.9238795325112867, -0.9142097557035307, -0.9039892931234433, -0.8932243011955152, -0.8819212643483549, -0.8700869911087113, -0.857728610000272, -0.8448535652497071, -0.8314696123025453, -0.8175848131515836, -0.8032075314806448, -0.7883464276266062, -0.773010453362737, -0.7572088465064846, -0.7409511253549589, -0.7242470829514668, -0.7071067811865475, -0.6895405447370669, -0.6715589548470184, -0.6531728429537765, -0.6343932841636454, -0.6152315905806267, -0.5956993044924334, -0.5758081914178453, -0.555570233019602, -0.534997619887097, -0.5141027441932217, -0.492898192229784, -0.4713967368259977, -0.4496113296546067, -0.42755509343028186, -0.40524131400498975, -0.3826834323650897, -0.35989503653498817, -0.33688985339221994, -0.3136817403988914, -0.29028467725446216, -0.2667127574748983, -0.24298017990326387, -0.21910124015686966, -0.1950903220161282, -0.17096188876030124, -0.14673047445536164, -0.12241067519921615, -0.09801714032956065, -0.07356456359966733, -0.04906767432741801, -0.024541228522912142, 6.123233995736766e-17, 0.024541228522912264, 0.049067674327418126, 0.07356456359966745, 0.09801714032956077, 0.12241067519921628, 0.14673047445536175, 0.17096188876030136, 0.19509032201612833, 0.21910124015686977, 0.24298017990326398, 0.2667127574748984, 0.29028467725446233, 0.3136817403988916, 0.33688985339222005, 0.3598950365349883, 0.38268343236508984, 0.40524131400498986, 0.4275550934302822, 0.4496113296546066, 0.4713967368259978, 0.4928981922297841, 0.5141027441932217, 0.5349976198870973, 0.5555702330196023, 0.5758081914178453, 0.5956993044924335, 0.6152315905806268, 0.6343932841636455, 0.6531728429537768, 0.6715589548470183, 0.6895405447370669, 0.7071067811865476, 0.724247082951467, 0.7409511253549591, 0.7572088465064846, 0.773010453362737, 0.7883464276266063, 0.8032075314806449, 0.8175848131515837, 0.8314696123025452, 0.8448535652497071, 0.8577286100002721, 0.8700869911087115, 0.881921264348355, 0.8932243011955153, 0.9039892931234433, 0.9142097557035307, 0.9238795325112867, 0.932992798834739, 0.9415440651830208, 0.9495281805930367, 0.9569403357322088, 0.9637760657954398, 0.970031253194544, 0.9757021300385286, 0.9807852804032304, 0.9852776423889412, 0.989176509964781, 0.99247953459871, 0.9951847266721969, 0.9972904566786902, 0.9987954562051724, 0.9996988186962042, 1.0, 0.9996988186962042, 0.9987954562051724, 0.9972904566786902, 0.9951847266721969, 0.99247953459871, 0.989176509964781, 0.9852776423889412, 0.9807852804032304, 0.9757021300385286, 0.970031253194544, 0.9637760657954398, 0.9569403357322088, 0.9495281805930367, 0.9415440651830208, 0.932992798834739, 0.9238795325112867, 0.9142097557035307, 0.9039892931234433, 0.8932243011955153, 0.881921264348355, 0.8700869911087115, 0.8577286100002721, 0.8448535652497071, 0.8314696123025452, 0.8175848131515837, 0.8032075314806449, 0.7883464276266063, 0.773010453362737, 0.7572088465064846, 0.7409511253549591, 0.724247082951467, 0.7071067811865476, 0.6895405447370669, 0.6715589548470183, 0.6531728429537768, 0.6343932841636455, 0.6152315905806268, 0.5956993044924335, 0.5758081914178453, 0.5555702330196023, 0.5349976198870973, 0.5141027441932217, 0.4928981922297841, 0.4713967368259978, 0.4496113296546066, 0.4275550934302822, 0.40524131400498986, 0.38268343236508984, 0.3598950365349883, 0.33688985339222005, 0.3136817403988916, 0.29028467725446233, 0.2667127574748984, 0.24298017990326398, 0.21910124015686977, 0.19509032201612833, 0.17096188876030136, 0.14673047445536175, 0.12241067519921628, 0.09801714032956077, 0.07356456359966745, 0.049067674327418126, 0.024541228522912264, 6.123233995736766e-17, -0.024541228522912142, -0.04906767432741801, -0.07356456359966733, -0.09801714032956065, -0.12241067519921615, -0.14673047445536164, -0.17096188876030124, -0.1950903220161282, -0.21910124015686966, -0.24298017990326387, -0.2667127574748983, -0.29028467725446216, -0.3136817403988914, -0.33688985339221994, -0.35989503653498817, -0.3826834323650897, -0.40524131400498975, -0.42755509343028186, -0.4496113296546067, -0.4713967368259977, -0.492898192229784, -0.5141027441932217, -0.534997619887097, -0.555570233019602, -0.5758081914178453, -0.5956993044924334, -0.6152315905806267, -0.6343932841636454, -0.6531728429537765, -0.6715589548470184, -0.6895405447370669, -0.7071067811865475, -0.7242470829514668, -0.7409511253549589, -0.7572088465064846, -0.773010453362737, -0.7883464276266062, -0.8032075314806448, -0.8175848131515836, -0.8314696123025453, -0.8448535652497071, -0.857728610000272, -0.8700869911087113, -0.8819212643483549, -0.8932243011955152, -0.9039892931234433, -0.9142097557035307, -0.9238795325112867, -0.9329927988347388, -0.9415440651830207, -0.9495281805930367, -0.9569403357322088, -0.9637760657954398, -0.970031253194544, -0.9757021300385285, -0.9807852804032304, -0.9852776423889412, -0.989176509964781, -0.99247953459871, -0.9951847266721968, -0.9972904566786902, -0.9987954562051724, -0.9996988186962042]

class angle(int):
    def __new__(cls, y, x):
        " compute a from y and x"
        return int.__new__(cls, find_angle(y, x))

    def in_radiant(self):
        return float(self.__hash__() - 128) / 128 * pi

    def in_degree(self):
        degree = float(self.__hash__() - 128) / 128 * 180
        if degree < 0:
            return degree + 360
        else:
            return degree

    def __add__(self, a2):
        a1 = self.__hash__()
        x = (cosins[a1] + cosins[a2]) / 2
        y = (cosins[a1 - 64] + cosins[a2 - 64]) / 2
        return int.__new__(cls, find_angle(y, x))

def find_angle(y, x):
    hyp = hypot(y, x)
    sina = y / hyp
    cosa = x / hyp
    a0 = 0
    an = 128
    while True:
        if a0 == an - 1:
            a = a0 if cosa - cosins[a0] < cosins[an] - cosa else an
            break
        else:
            am = (a0 + an) >> 1
            if cosins[a0] <= cosa < cosins[am]:
                an = am
            else:
                a0 = am

    if abs(cosins[-a - 64] - sina) < abs(cosins[a - 64] - sina): a = 256 - a

    if a == 256: a = 0

    return a

from math import cos, sin
a = angle(3, 4)
print(a)
print(sin(a.in_radiant()), cos(a.in_radiant()))